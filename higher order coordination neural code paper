class figure2:
    def __init__(self,spikes,trials,lambda_):
        self.spikes = spikes # how many arrivals one wishes, 
        self.trials = trials
        self.lambda_ = lambda_
         
    def generate_raw_spike_trains(self,proportion=1,jitter=None):
        y = np.sort(np.random.gamma(shape=np.arange(1,self.spikes+1),scale=float(1/(proportion*self.lambda_))))
        for i in range(self.trials-1):
            r = np.sort(np.random.gamma(shape=np.arange(1,self.spikes+1),scale=float(1/(proportion*self.lambda_))))
            y = np.vstack((y,r))
        if jitter==None:
            return y
        else:
            return np.sort(y+np.random.uniform(-jitter,jitter,size=(self.trials,self.spikes)),axis=1)
    
    def generate_intensity(self,sharedproportion=1,jitter=None,mixed=False,sembands=False,display=False,edgecorrected=False):
        if mixed:
            assert sharedproportion != 1
            assert jitter != None
            pure_spike_trains = self.generate_raw_spike_trains(proportion=1-sharedproportion)
            shared_spike_trains = self.generate_raw_spike_trains(proportion=sharedproportion,jitter=jitter)
            spike_trains = np.sort(np.hstack((pure_spike_trains,shared_spike_trains)),axis=1)
            del shared_spike_trains
            del pure_spike_trains
        else:
            spike_trains = self.generate_raw_spike_trains()
            
        hist = np.histogram(spike_trains[0],bins=np.arange(0,np.max(spike_trains)+1))[0]
        for i in range(1,self.trials):
            hist = np.vstack((hist,np.histogram(spike_trains[i],bins=np.arange(0,np.max(spike_trains)+1))[0]))
        intensity = np.mean(hist,axis=0)
            
        if edgecorrected:
            intensity = intensity[(intensity>=self.lambda_-0.5) | (np.arange(len(intensity))<30)]
            
        if display:
            if sembands:
                t = np.arange(0,len(intensity))
                standard_error = np.std(hist,axis=0)/pow(self.trials,0.5)
                standard_error = standard_error[:len(intensity)]
                plt.fill_between(t,intensity-standard_error,intensity+standard_error,alpha=0.6)
                plt.plot(t,intensity)
                del t
                del standard_error
            else:
                t = np.arange(0,len(intensity))
                plt.plot(t,intensity)
                del t
        del hist        
        return intensity
    
    def generate_c(self):
        shared_spikes = np.arange(0.05,0.5,0.05)
        spike_count_corrcoef = []
        for percentage in shared_spikes:
            neuron1 = self.generate_intensity(sharedproportion=percentage,mixed=True,edgecorrected=True,jitter=5)
            neuron2 = self.generate_intensity(sharedproportion=percentage,mixed=True,edgecorrected=True,jitter=5)
            neuron1 = neuron1[:min(len(neuron1),len(neuron2))]
            neuron2 = neuron2[:min(len(neuron1),len(neuron2))]
            spike_count_corrcoef.append(pearsonr(neuron1,neuron2)[0])
        plt.scatter(shared_spikes,np.asarray(spike_count_corrcoef))
        plt.xlabel('Proportion of Shared Spikes')
        plt.ylabel('Spike Count Correlation')
        return None
    
    def generate_d(self):
        # generates a plot of figure 2d
        neuron1 = self.generate_intensity(mixed=False,edgecorrected=True,jitter=5) #
        neuron2 = self.generate_intensity(mixed=False,edgecorrected=True,jitter=5)
        neuron1 = neuron1[:min(len(neuron1),len(neuron2))]
        neuron2 = neuron2[:min(len(neuron1),len(neuron2))]
        sigma_1,sigma_2 = np.std(neuron1),np.std(neuron2)
        mu_1,mu_2 = np.mean(neuron1),np.mean(neuron2)
        t = np.arange(-min(len(neuron1),len(neuron2))+1,min(len(neuron1),len(neuron2)))
        y = fftconvolve((neuron1-mu_1),(neuron2-mu_2)[::-1],'full')/(min(len(neuron1),len(neuron2))*sigma_1*sigma_2)
        plt.plot(t,y,color='teal',label='0%')
        
        for percentage,color in [(0.2,'mediumpurple'),(0.5,'purple')]:
            neuron1 = self.generate_intensity(sharedproportion=percentage,mixed=True,edgecorrected=True,jitter=5)
            neuron2 = self.generate_intensity(sharedproportion=percentage,mixed=True,edgecorrected=True,jitter=5)
            neuron1 = neuron1[:min(len(neuron1),len(neuron2))]
            neuron2 = neuron2[:min(len(neuron1),len(neuron2))]
            sigma_1,sigma_2 = np.std(neuron1),np.std(neuron2)
            mu_1,mu_2 = np.mean(neuron1),np.mean(neuron2)
            t = np.arange(-min(len(neuron1),len(neuron2))+1,min(len(neuron1),len(neuron2)))
            y = fftconvolve((neuron1-mu_1),(neuron2-mu_2)[::-1],'full')/(min(len(neuron1),len(neuron2))*sigma_1*sigma_2)
            plt.plot(t,y,color=color,label=str(percentage*100)+'%')
        
        plt.xlim(-50,50)
        plt.legend()
        plt.xlabel('Time Lag (in units of 1)')
        plt.ylabel('Spike Count Correlation')
        return None
